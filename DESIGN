Dissent consists of an several key, independent components,
corresponding to subdirectories in the 'src' directory:

- Transports -- network communication layers such as Tcp, Ssl, Udp
- Connections -- represents an established link using a transport and gives an
  addressing scheme independent of the underlying transport
- Overlay -- organizes and specifies which nodes should connect with other
  nodes
- Crypto -- provides wrappers around external crypto libraries as well as
  extensions to many useful cryptographic techniques
- Identity -- an extension from the addressing of Connections to provide a more
  robust identity also supports various forms of authenication of this identity
- Tunnel -- provides a Socks5 compliant client and server stubs
- Anonymity -- anonymous group communication protocols
- Session -- establishes the set of participants for communicating in ensuing rounds

Note: Message definitions are included at the bottom of this document.

Before beginning a Dissent session, a session configuration must be
established, by a set of server administrators, for example. A Dissent
configuration consists of a list of servers or super peers, mechanisms to
connect to the servers (transport type [TCP,SSL], transport address [IP:Port]),
a set of public keys named by a "Connection"-level address (used for
authetication), the type of authentication context used by clients, and the
protocol used for anonymous communication. The hash of this configuration will
serve as a session identifier, so that participants can ensure they have the
proper configuration.

Servers, first, establish connections to every other server, creating an
all-to-all server topology. Each connection between servers begins by first
establishing a transport-level connection followed by an overlay-level
connection.  The receiver of the connection transmits an Inquire message with
the initiator responding with an Inquired, these messages establish the overlay
Id of each peer.

R -> I Inquire (Receiver's PeerId | Initiator's Transport Address |
                Session ID | Dissent Version)
I -> R Inquired (Initiator's PeerId)

Upon establishing connections or completing a round, Dissent begins
resynchronizing by having the first server listed in the configuration file, or
prooposer, transmit an Init message. This message contains a nonce that will be
used to eliminate synchronization issues among servers in the ensuing message
exchanges. The message includes a Timestamp to mitigate confusion and replay
attacks.

A -> B Init ([PeerId | I Nonce | Timestamp]_[Signature])

After receiving the Init messages, servers begin exchanging Enlist messages
with each other.  Enlist messages authenticate servers and contain ephemeral
keys and optional data for use in an upcoming protocol round. Once a server has
received an Enlist from all other servers, they begin the nonce generation
process.  Upon arriving on an agreed nonce, servers send to each other the
Nonce message.

A -> B Enlist ([PeerId | I Nonce | Ephemeral Public Key |
                Optional]_[Signature])
A -> B Nonce ([PeerId | Ephemeral Public Key | Optional | Nonce]_[Signature])

At the conclusion of this process, servers allow clients to register.  Prior to
registering, clients must connect to a server using the same process as servers
connect to each other, Inquire and Inquired messages. First establishing a
transport-level connection, followed by an overlay-level connection.

During registration, clients first transmit a Queue message to enter the
registration queue. Queue messages contain a client temporary nonce as a means
to authenticate that the the upstream servers to prevent man in the middle
attacks. When the servers have completed the nonce generation, they respond to
these messages with a Queued message containing the accumulated Nonce messages
exchanged by the servers.  Clients then respond with a Register message
containing a third-party verifiable authentication context against the nonce,
an ephemeral key to be used during the protocolh, and any additional
information necessary for the upcoming protocol.

C -> S Queue (Client Nonce)
S -> C Queued ([Nonce Messages | Client Nonce]_[Signature])
C -> S Register ([PeerId | Ephemeral Public Key | Optional | Nonce]_[Signature])

Upon beginning the registration process, each server accepts registration
messages for 5 minutes from their own prospective. After this registration
window, each server transmits a list of client registration messages to every
other server, using the List message.  Upon receiving the List from all
servers, a server constructs consisting of all clients, eliminating duplicate
identities, and then hashes the resulting list and signs it transmitting te
result in a VerifyList message.  Servers then sign the resulting list and share
amongst each other their signatures. Since this process is deterministic,
servers need not share the list. Upon receiving all signatures, servers
transmit a Start message to clients initiating the beginning of the protocol
round.  A client registering with multiple servers remains connected to the
server with the lowest Id in lexicongraphic order.

A -> B List ([List of Register]_[Signature])
A -> B VerifyList (Signature)
S -> C Start (Complete List of Register | Server Signatures)
S -> C Stop ([Immediate, Reason, Nonce]_[Signature])

A protocol round constitutes one or more anonymous exchanges.  The protocol
round continues for at least 1 exchange or 60 minutes, whichever is longer. At
which point, each server broadcasts a Stop message with the reason "Protocol
run complete" and immediate set to false.  At any point, if a server
disconnects from any other server, that server immediately broadcasts a Stop
message with reason "Server disconnected x from y" and immediate set to true.

Upon receiving a stop message, the round terminates immediately if immediate is
set to true or upon conclusion of the current round if not. At which point, the
entire process repeats from the first server transmitting an Init message and
clients' Queue.

==============================================================================
Nonce generation:

Servers currently employ the following Nonce generation: Nonce = SHA1([Enlist])
ordered by the Id of the servers.

==============================================================================
Protocol -- Neff Shuffle:

TODO

==============================================================================
Protocol -- Client/Server Bulk:

TODO

==============================================================================
Protocol -- Verifiable DC-nets:

TODO


==============================================================================
Technical notes:

- Dissent does not directly provide peer-level authentication, that is left to
  the transport. For anonymous authentication, that means that clients will not
  be required to authenticate. If peers perform authentication, the identity
  should be matched against what is provided at the overlay level.
- Start and Started merely provide for synchronization on messages that may be
  transmitted by the round.
- Start may optionally contain group-wide information, if the Anonymity protocol
  requires it. In particular, this might be the Accumulated List of Queued and
  matching signatures from the Listed messages.
- If server has received a Stop message before stopping, it does not need to
  broadcast a Stop message.
- Dissent assumes that messages between two parties are delivered in order.
- The Timestamp in the Init message prevents an adversary from partitioning the
  online server set when the proposer is actively attempting to Init a new
  round
- If a Timestamp has been replayed, the proposer is offline, and there exists
  at least one honest online server, then the round will terminate at the Nonce
  message exchange because there would be no proper proposer signature on the
  Nonce
- If the proposer is the only honest server and a Timestamp has been replayed,
  servers would only be able to replay previous state up until the Start
  message. Honest clients will detect at this point that their registration
  information is either absent, incorrect, or improperly signed.
==============================================================================
Terms:

Session - a well-defined set of entities that may participate in one or more
  anonymous communication rounds

Round - an instance of a session, where some subset of the entities
  participate in anonymous communication

Exchange - some rounds support multiple transmissions from participants,
  each transmission and resulting cleartext constitutes an exchange

==============================================================================
Message formats:

A message either is a request, response, or notification. A request and
notification are RPC. A request expects a response in return.  Dissent stores
these messages as QVariantLists into QByteArrays using QDataStream. All incoming
messages also contain a path to the remote sender, so that a receiver can easily
determine the source of a message.

A request and notification use the following format: [Type, Id, Method, Data]
The fields are defined as follows:
- Type - QString - the type of message, 'n' - notification,  'r' - response,
    'p' - response
- Id - int - unique identifier for a request, that is included within the response
    so that it can be routed to the correct requestor
- Method - QString - the remote procedure
- Data - QVariant - data for the RPC

A response uses the following format: [Type, Id, Success, Data / Error]
- Type - QString - the type of message, 'n' - notification,  'r' - response,
    'p' - response
- Id - int - unique identifier for a request, that is included within the response
    so that it can be routed to the correct requestor
- Method - bool - whether or not the request was successfully handled
- Data - QVariant - response data for the procedure call
- Error - int - error code, see ErrorTypes (need doxygen link)

The following are messages defined within Dissent. Initiating messages place
their name into the Request (or Notification) Method field. Responses are
implied, therefore their name is not included within the Response. The
following reprsent the Data portion of a message stored as a QVariant.
Messages will be converted into QByteArrays via QDataStream, signed if
necessary, for signed messages will be stored as a QVariantList with the first
entry bing the data as a QByteArray and the signature as the second entry also
as a QByteArray.  Because all messages implicitly contain the source of a
message and have a field for the method, these components are not included
within the data field as well.

Inquire - Receiver's PeerId | Initiator's Transport Address | Session ID |
         Dissent Version
- PeerId - Connections:Id as QByteArray - Receiver's overlay Id
- Transport Address - Transports::Address as a QString - Initiator's Transport
  Address
- Dissent Version - int - Running version of Dissent, the receiver can close
  the connection if it does not match his own version

Inquired - Initiator's PeerId
- PeerId - Initiator's overlay Id (Connection::Id as a QByteArray)

Init - [PeerId | I Nonce | Timestamp]_[Signature]
- PeerId - Connections::Id as QByteArray - Local Peer's overlay Id
- I Nonce - QByteArray - Used in the Enlist message to ensure causality
  of Enlist messages
- Timestamp - 64-bit integer - Time since the "Epoch"

Enlist - [PeerId | I Nonce | Ephemeral Public Key | Optional]_[Signature]
- PeerId - Connections::Id as QByteArray - Local Peer's overlay Id
- I Nonce - QByteArray - The nonce included in the Init message
- Ephemeral Public Key - QByteArray of DSA key - The ephemeral key to
  be used in operations during protocol exchanges
- Optional - QVariant - Additional data necessary for the protocol round
- Signature - QByteArray - Signature on [PeerId | Ephemeral Public Key |
  Optional], should use the servers well known public key that matches
  the PeerId

Nonce - [PeerId | Ephemeral Public Key | Optional | Nonce]_[Signature]
- PeerId - Connections::Id as QByteArray - Local Peer's overlay Id
- Ephemeral Public Key - QByteArray of DSA key - The ephemeral key to
  be used in operations during protocol exchanges
- Optional - QVariant - Additional data necessary for the protocol round
- Nonce - QByteArray - A nonce to use in the upcoming protocol round
- Signature - QByteArray - Signature on [PeerId | Ephemeral Public Key |
  Optional], should use the servers well known public key that matches
  the PeerId

Queue - Client Nonce
- Client Nonce - QByteArray - An short-lived Nonce to prevent man in the
  middle attacks between the client and the upstream server

Queued - [Nonce Messages | Client Nonce]_[Signature]
- Nonce Messages - All of the server Nonce messages
- Client Nonce - The client nonce specified in the Queue message
- Signature - QByteArray - Signature on [Nonce Message | Client Nonce],
  should use the servers well known public key that matches the PeerId

Register - [PeerId | Ephemeral Public Key | Optional |
  Nonce]_[Signature]
- PeerId - Connections::Id as QByteArray - Local Peer's overlay Id
- Ephemeral Public Key - QByteArray of DSA key - The ephemeral key to
  be used in operations during protocol exchanges
- Optional - QVariant - Additional data necessary for the protocol round
- Nonce - QByteArray - A nonce to use in the upcoming protocol round
- Signature - QByteArray - Depends on the authentication type, could be a
  DSA signature from a pre-exchanged key, an LRS signature from an agreed
  upon group of public keys, the format of the signature is depends on the
  session configuration.

List - [List of Register]_[Signature]
- List of Register - QVariantList - List of all the Register messages received
- Signature - QByteArray - Signature on QByteArray format of the List of
  Register

VerifyList - Signature
- Signature - QByteArray - Signature on the hashed accumulated List of Register

Start - Complete List of Register | Server Signatures
- List of Register - QVariantList - List of all the Register messages
- Server Signatures - QVariantList - Set of all signatures for the
  accumulated list

Stop - [Immediate, Reason, Nonce]_[Signature]
- Immediate - bool - Should stop now or after the current exchange has
  completed
- Reason - QString - The reason for stopping
- Nonce - QByteArray - The round nonce
- Signature - The well known public key of the sender of this message
